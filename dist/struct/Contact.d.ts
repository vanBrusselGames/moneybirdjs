import { AddNoteOptions, APIContact, ContactPersonOptions, UpdateContactOptions } from "../types";
import { Administration } from "./index";
import { Note } from "./Note";
import { ContactPerson } from "./ContactPerson";
import { CustomField } from "./CustomField";
import { Event } from "./Event";
/** */
export declare class Contact {
    administration: Administration;
    id: string;
    administration_id: string;
    company_name: string;
    firstname: string;
    lastname: string;
    address1: string;
    address2: string;
    zipcode: string;
    city: string;
    country: string;
    phone: string;
    delivery_method: string;
    customer_id: string;
    tax_number: string;
    chamber_of_commerce: string;
    bank_account: string;
    attention: string;
    email: string;
    email_ubl: boolean;
    send_invoices_to_attention: string;
    send_invoices_to_email: string;
    send_estimates_to_attention: string;
    send_estimates_to_email: string;
    sepa_active: boolean;
    sepa_iban: string;
    sepa_iban_account_name: string;
    sepa_bic: string;
    sepa_mandate_id: string;
    sepa_mandate_date: string | null;
    sepa_sequence_type: string;
    credit_card_number: string;
    credit_card_reference: string;
    credit_card_type: null;
    tax_number_validated_at: Date | null;
    tax_number_valid: boolean | null;
    invoice_workflow_id: string | null;
    estimate_workflow_id: string | null;
    si_identifier: string;
    si_identifier_type: string | null;
    moneybird_payments_mandate: boolean;
    created_at: Date;
    updated_at: Date;
    version: number;
    sales_invoices_url: string;
    notes: Note[];
    custom_fields: CustomField[];
    contact_people: ContactPerson[];
    archived: boolean;
    events: Event[];
    constructor(administration: Administration, data: APIContact);
    private setData;
    /** Updates this contact. */
    update(options: UpdateContactOptions): Promise<this>;
    /** Deletes this contact, or archives it when deleting was not possible. */
    delete(): Promise<void>;
    addNote(options: AddNoteOptions): Promise<Note>;
    deleteNote(noteId: string): Promise<void>;
    getContactPerson(contactPersonId: string): Promise<ContactPerson>;
    addContactPerson(options: ContactPersonOptions): Promise<ContactPerson>;
    deleteContactPerson(contactPersonId: string): Promise<void>;
}
